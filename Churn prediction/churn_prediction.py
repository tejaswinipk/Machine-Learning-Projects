# -*- coding: utf-8 -*-
"""churn prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/185hvAjsiQQk60SWnJcCiXBwdgIRwTyhn

***CUSTOMER CHURN PREDICTION***

---

# Data preprocessing
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/codsoft/Churn modelling/Churn_Modelling.csv')

df.sample(5)

"""Creating dummies for the categorical variable(Geography)"""

# Create dummy variables for 'Geography'
df_geography_dummies = pd.get_dummies(df['Geography'], prefix='Geography')

# Concatenate the original DataFrame and the dummy variables
df = pd.concat([df, df_geography_dummies], axis=1)

# Drop the original 'Geography' column as it's no longer needed
df.drop('Geography', axis=1, inplace=True)

"""Label-encoding"""

df['Gender'] = df['Gender'].replace({'Male': 1, 'Female': 0})

"""Dropping unwanted columns"""

df = df.drop('RowNumber', axis='columns')
df = df.drop('Surname', axis='columns')
df = df.drop('CustomerId', axis='columns')

"""Data normalization by feature scaling"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Select the columns to be scaled
columns_to_scale = ['Balance', 'CreditScore', 'EstimatedSalary','Age','Tenure']

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform the selected columns
df[columns_to_scale] = scaler.fit_transform(df[columns_to_scale])

"""Final cleaned dataset"""

df.sample(5)

"""#Training the model using neural network


"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Data preprocessing
X = df.drop('Exited', axis=1).values  # Features
y = df['Exited'].values  # Target variable

# Split the dataset into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.fit_transform(X_test)

# Build the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_scaled, y_train, epochs=30, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
val_loss, val_accuracy = model.evaluate(X_val_scaled, y_val)
print(f"Accuracy: {val_accuracy:.4f}")

# Predict values on the test set
y_pred = model.predict(X_test_scaled)

# Convert the predicted probabilities to binary predictions (0 or 1)
y_pred_binary = (y_pred > 0.5).astype(int)

# Compute the accuracy on the test set
test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print(f"Test Accuracy: {test_accuracy:.4f}")

# Optionally, you can print the confusion matrix and classification report for more details
from sklearn.metrics import confusion_matrix, classification_report

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred_binary))

print("\nClassification Report:")
print(classification_report(y_test, y_pred_binary))

"""The F1 score for both the classes is not equal..so checking the distribution of the classes"""

import matplotlib.pyplot as plt

# Count the number of occurrences of each class
class_counts = df['Exited'].value_counts()

# Plot the class distribution
plt.figure(figsize=(6, 4))
bars = class_counts.plot(kind='bar', color=['blue', 'green'])

# Annotate each bar with its count value
for i, count in enumerate(class_counts):
    plt.text(i, count + 0.1, str(count), ha='center', va='bottom')

plt.title('Class Distribution')
plt.xlabel('Class')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""#Oversampling"""

from imblearn.over_sampling import SMOTE

# Create the SMOTE object
smote = SMOTE(sampling_strategy='minority', random_state=42)

# Apply SMOTE to oversample the minority class
X_resampled, y_resampled = smote.fit_resample(X, y)

import numpy as np

# Example value counts of y_resampled
unique_elements, counts = np.unique(y_resampled, return_counts=True)

# Print the unique elements and their counts
for elem, count in zip(unique_elements, counts):
    print(f"{elem}: {count}")

"""Training the model with the balanced data"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Data preprocessing
X = df.drop('Exited', axis=1).values  # Features
y = df['Exited'].values  # Target variable

# Split the dataset into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Build the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
val_loss, val_accuracy = model.evaluate(X_val_scaled, y_val)
print(f"Accuracy: {val_accuracy:.4f}")

# Predict values on the test set
y_pred = model.predict(X_test_scaled)

# Convert the predicted probabilities to binary predictions (0 or 1)
y_pred_binary = (y_pred > 0.5).astype(int)

# Compute the accuracy on the test set
test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print(f"Test Accuracy: {test_accuracy:.4f}")

# Print the confusion matrix and classification report for more details
from sklearn.metrics import confusion_matrix, classification_report

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred_binary))

print("\nClassification Report:")
print(classification_report(y_test, y_pred_binary))

"""The F1 score is balanced in both the classes

#Visualizing the classification report on the test data
"""

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Generate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred_binary)

# Plot the confusion matrix using a heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

from sklearn.metrics import classification_report
import pandas as pd

# Generate the classification report
report = classification_report(y_test, y_pred_binary, target_names=['ham', 'spam'], output_dict=True)
df_report = pd.DataFrame(report).transpose()

# Plot the classification report using a heatmap
plt.figure(figsize=(8, 4))
sns.heatmap(df_report.iloc[:-1, :-1], annot=True, fmt=".2f", cmap="Blues")
plt.title('Classification Report Heatmap')
plt.xlabel('Metrics')
plt.ylabel('Class')
plt.show()



import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

# Calculate the ROC curve
fpr, tpr, _ = roc_curve(y_test, y_pred)

# Calculate the AUC
roc_auc = auc(fpr, tpr)

# Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.grid(True)
plt.show()